///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 21.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// Ensure that the interface encoding is set to locale encoding by calling
// SetHcppInterfaceStringEncodingIsUtf8(false) at the beginning of the program.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
///////////////////////////////////////////////////////////////////////////////

#pragma once

#  include "HalconCpp.h"
#  include "HDevThread.h"




using namespace HalconCpp;

// Procedure declarations 
// External procedures 
// Chapter: Deep Learning / Evaluation
void add_colormap_to_image (HObject ho_GrayValueImage, HObject ho_Image, HObject *ho_ColoredImage, 
    HTuple hv_HeatmapColorScheme);
// Chapter: Deep Learning / Evaluation
// Short Description: Create a lookup table and convert a grey scale image. 
void apply_colorscheme_on_gray_value_image (HObject ho_InputImage, HObject *ho_ResultImage, 
    HTuple hv_Schema);
// Chapter: Deep Learning / Evaluation
void area_iou (HTuple hv_Sample, HTuple hv_Result, HTuple hv_InstanceType, HTuple hv_ResultSortIndices, 
    HTuple *hv_SampleArea, HTuple *hv_ResultArea, HTuple *hv_IoU);
// Chapter: Deep Learning / Model
// Short Description: Distort the given samples to augment the dataset. 
void augment_dl_samples (HTuple hv_DLSampleBatch, HTuple hv_GenParam);
// Chapter: Deep Learning / Semantic Segmentation
// Short Description: Calculate the class weights for a semantic segmentation dataset. 
void calculate_dl_segmentation_class_weights (HTuple hv_DLDataset, HTuple hv_MaxWeight, 
    HTuple hv_IgnoreClassIDs, HTuple *hv_ClassWeights);
// Chapter: Deep Learning / Evaluation
// Short Description: Calculate evaluation measures based on the values of RunningMeasures and the settings in EvalParams. 
void calculate_evaluation_measures (HTuple hv_RunningMeasures, HTuple hv_EvalParams, 
    HTuple *hv_EvaluationResult);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Calculate anomaly detection measures based on RunningMeasures. 
void calculate_image_anomaly_measures (HTuple hv_RunningMeasures, HTuple hv_EvalParams, 
    HTuple *hv_EvaluationResult);
// Chapter: Deep Learning / Evaluation
// Short Description: Calculate image classification measures based on RunningMeasures. 
void calculate_image_classification_measures (HTuple hv_RunningMeasures, HTuple hv_EvalParams, 
    HTuple *hv_EvaluationResult);
// Chapter: Deep Learning / Evaluation
// Short Description: Calculate instance measures based on RunningMeasures. 
void calculate_instance_measures (HTuple hv_RunningMeasures, HTuple hv_EvalParams, 
    HTuple *hv_EvaluationResult);
// Chapter: Deep Learning / Evaluation
// Short Description: Calculate pixel measures based on RunningMeasures. 
void calculate_pixel_measures (HTuple hv_RunningMeasures, HTuple hv_EvalParams, HTuple *hv_EvaluationResult);
// Chapter: Deep Learning / Model
// Short Description: Checks the content of the parameter dictionary DLPreprocessParam. 
void check_dl_preprocess_param (HTuple hv_DLPreprocessParam);
// Chapter: Deep Learning / Model
void check_train_dl_model_params (HTuple hv_DLDataset, HTuple hv_DLModelHandle, HTuple hv_NumTrainSamples, 
    HTuple hv_StartEpoch, HTuple hv_TrainParam);
// Chapter: Deep Learning / Model
// Short Description: Collect the information required for displaying the training progress update. 
void collect_train_dl_model_info (HTuple hv_DLModelHandle, HTuple hv_TrainResults, 
    HTuple hv_EvaluationInfos, HTuple hv_EvaluationComparisonKeys, HTuple hv_Iteration, 
    HTuple hv_NumIterations, HTuple hv_NumIterationsPerEpoch, HTuple hv_NumSamplesMeanLoss, 
    HTuple *hv_TrainInfo);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Compute thresholds for DL Anomaly Detection. 
void compute_dl_anomaly_thresholds (HTuple hv_DLModelHandle, HTuple hv_DLDataset, 
    HTuple hv_GenParam, HTuple *hv_AnomalySegmentationThreshold, HTuple *hv_AnomalyClassificationThresholds);
// Chapter: Deep Learning / Classification
// Short Description: Calculate top-K error. 
void compute_top_k_error (HTuple hv_ImageLabelIDs, HTuple hv_TopKPredictions, HTuple hv_K, 
    HTuple *hv_TopKError);
// Chapter: Tools / Geometry
// Short Description: Convert the parameters of rectangles with format rectangle2 to the coordinates of its 4 corner-points. 
void convert_rect2_5to8param (HTuple hv_Row, HTuple hv_Col, HTuple hv_Length1, HTuple hv_Length2, 
    HTuple hv_Phi, HTuple *hv_Row1, HTuple *hv_Col1, HTuple *hv_Row2, HTuple *hv_Col2, 
    HTuple *hv_Row3, HTuple *hv_Col3, HTuple *hv_Row4, HTuple *hv_Col4);
// Chapter: Tools / Geometry
// Short Description: Convert for four-sided figures the coordinates of the 4 corner-points to the parameters of format rectangle2. 
void convert_rect2_8to5param (HTuple hv_Row1, HTuple hv_Col1, HTuple hv_Row2, HTuple hv_Col2, 
    HTuple hv_Row3, HTuple hv_Col3, HTuple hv_Row4, HTuple hv_Col4, HTuple hv_ForceL1LargerL2, 
    HTuple *hv_Row, HTuple *hv_Col, HTuple *hv_Length1, HTuple *hv_Length2, HTuple *hv_Phi);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: This procedure creates a block of samples for a given thread. 
void create_dl_dataset_anomaly_samples (HTuple hv_ImageList, HTuple hv_LabelList, 
    HTuple hv_AnomalyList, HTuple hv_AnomalyDirGiven, HTuple hv_NumSamplesPerThread, 
    HTuple hv_UniqueIndex, HTuple *hv_SamplesOutput, HTuple *hv_Exception);
// Chapter: Deep Learning / Model
// Short Description: Creates a dictionary with preprocessing parameters. 
void create_dl_preprocess_param (HTuple hv_DLModelType, HTuple hv_ImageWidth, HTuple hv_ImageHeight, 
    HTuple hv_ImageNumChannels, HTuple hv_ImageRangeMin, HTuple hv_ImageRangeMax, 
    HTuple hv_NormalizationType, HTuple hv_DomainHandling, HTuple hv_IgnoreClassIDs, 
    HTuple hv_SetBackgroundID, HTuple hv_ClassIDsBackground, HTuple hv_GenParam, 
    HTuple *hv_DLPreprocessParam);
// Chapter: Deep Learning / Model
// Short Description: Create a training parameter dictionary which is used in train_dl_model. 
void create_dl_train_param (HTuple hv_DLModelHandle, HTuple hv_NumEpochs, HTuple hv_EvaluationIntervalEpochs, 
    HTuple hv_EnableDisplay, HTuple hv_RandomSeed, HTuple hv_GenParamName, HTuple hv_GenParamValue, 
    HTuple *hv_TrainParam);
// Chapter: Deep Learning / Evaluation
// Short Description: Generate a dictionary EvalParams, which contains default values for evaluation parameters. 
void create_evaluation_default_param (HTuple hv_EvaluationType, HTuple hv_ClassIDsModel, 
    HTuple *hv_EvalParams);
// Chapter: Graphics / Window
// Short Description: Close all window handles contained in a dictionary. 
void dev_close_window_dict (HTuple hv_WindowHandleDict);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Display evaluation results of an evaluated DL model of type 'anomaly_detection'. 
void dev_display_anomaly_detection_evaluation (HTuple hv_EvaluationResult, HTuple hv_EvalParam, 
    HTuple hv_GenParam, HTuple hv_WindowHandleDict);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Display pie charts for prediction or recall of an anomaly detection evaluation. 
void dev_display_anomaly_evaluation_pie_chart (HTuple hv_WindowHandle, HTuple hv_EvaluationResult, 
    HTuple hv_Mode, HTuple hv_ThresholdIndex);
// Chapter: Graphics / Output
// Short Description: Display a map of the confidences. 
void dev_display_confidence_regions (HObject ho_ImageConfidence, HTuple hv_DrawTransparency, 
    HTuple *hv_Colors);
// Chapter: Deep Learning / Model
// Short Description: Visualize different images, annotations and inference results for a sample. 
void dev_display_dl_data (HTuple hv_DLSample, HTuple hv_DLResult, HTuple hv_DLDatasetInfo, 
    HTuple hv_KeysForDisplay, HTuple hv_GenParam, HTuple hv_WindowHandleDict, HTuple* hv_WindowHandle=0);
// Chapter: Deep Learning / Model
// Short Description: Visualize for a given number of samples the raw image, ground truth annotation, and inferred results. 
void dev_display_dl_data_tiled (HTuple hv_DLDataset, HTuple hv_DLModelHandle, HTuple hv_NumSamples, 
    HTuple hv_Split, HTuple hv_GenParam, HTuple hv_WindowHandle, HTuple *hv_WindowHandleOut);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Display the ground truth anomaly regions of the given DLSample. 
void dev_display_ground_truth_anomaly_regions (HTuple hv_SampleKeys, HTuple hv_DLSample, 
    HTuple hv_CurrentWindowHandle, HTuple hv_LineWidth, HTuple hv_AnomalyRegionLabelColor, 
    HTuple hv_AnomalyColorTransparency, HTuple *hv_AnomalyRegionExists);
// Chapter: Graphics / Output
// Short Description: Display the ground truth bounding boxes of DLSample. 
void dev_display_ground_truth_detection (HTuple hv_DLSample, HTuple hv_SampleKeys, 
    HTuple hv_LineWidthBbox, HTuple hv_ClassIDs, HTuple hv_BboxColors, HTuple hv_BboxLabelColor, 
    HTuple hv_WindowImageRatio, HTuple hv_TextColor, HTuple hv_ShowLabels, HTuple hv_ShowDirection, 
    HTuple hv_WindowHandle, HTuple *hv_BboxIDs);
// Chapter: Deep Learning / Model
// Short Description: Initialize the visualization of the training progress. This includes setting default values for visualization parameters. 
void dev_display_init_train_dl_model (HTuple hv_DLModelHandle, HTuple hv_TrainParam, 
    HTuple *hv_DisplayData);
// Chapter: Graphics / Output
// Short Description: Display a color bar next to an image. 
void dev_display_map_color_bar (HTuple hv_ImageWidth, HTuple hv_ImageHeight, HTuple hv_MapColorBarWidth, 
    HTuple hv_Colors, HTuple hv_MaxValue, HTuple hv_WindowImageRatio, HTuple hv_WindowHandle);
// Chapter: Graphics / Output
// Short Description: Display a matrix inside a window 
void dev_display_matrix (HTuple hv_Matrix, HTuple hv_ColumnNames, HTuple hv_RowNames, 
    HTuple hv_WindowHandle, HTuple hv_GenParam);
// Chapter: Graphics / Output
// Short Description: This procedure draws a pie chart into the active window handle. 
void dev_display_pie_chart (HTuple hv_WindowHandle, HTuple hv_Ratios, HTuple hv_Row, 
    HTuple hv_Column, HTuple hv_Radius, HTuple hv_Colors, HTuple hv_GenParam);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Display the detected anomaly regions. 
void dev_display_result_anomaly_regions (HObject ho_AnomalyRegion, HTuple hv_CurrentWindowHandle, 
    HTuple hv_LineWidth, HTuple hv_AnomalyRegionResultColor, HTuple* hv_WindowHandle = 0);
// Chapter: Graphics / Output
// Short Description: Display result bounding boxes. 
void dev_display_result_detection (HTuple hv_DLResult, HTuple hv_ResultKeys, HTuple hv_LineWidthBbox, 
    HTuple hv_ClassIDs, HTuple hv_TextConf, HTuple hv_Colors, HTuple hv_BoxLabelColor, 
    HTuple hv_WindowImageRatio, HTuple hv_TextPositionRow, HTuple hv_TextColor, HTuple hv_ShowLabels, 
    HTuple hv_ShowDirection, HTuple hv_WindowHandle, HTuple *hv_BboxClassIndices);
// Chapter: Graphics / Output
// Short Description: Display the ground truth/result segmentation as regions. 
void dev_display_segmentation_regions (HObject ho_SegmentationImage, HTuple hv_ClassIDs, 
    HTuple hv_ColorsSegmentation, HTuple hv_ExcludeClassIDs, HTuple *hv_ImageClassIDs);
// Chapter: Deep Learning / Model
// Short Description: Display a legend according to the generic parameters. 
void dev_display_tiled_legend (HTuple hv_WindowImages, HTuple hv_GenParam);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Display information about the training of an anomaly detection model. 
void dev_display_train_info_anomaly_detection (HTuple hv_TrainParam, HTuple *hv_WindowHandleInfo);
// Chapter: Deep Learning / Model
// Short Description: Update the various texts and plots during training. 
void dev_display_update_train_dl_model (HTuple hv_TrainParam, HTuple hv_DisplayData, 
    HTuple hv_TrainInfo, HTuple hv_Epochs, HTuple hv_Loss, HTuple hv_LearningRate, 
    HTuple hv_EvalEpochs, HTuple hv_EvalValues, HTuple hv_EvalValuesTrain);
// Chapter: Graphics / Output
// Short Description: Display a map of weights. 
void dev_display_weight_regions (HObject ho_ImageWeight, HTuple hv_DrawTransparency, 
    HTuple hv_SegMaxWeight, HTuple *hv_Colors);
// Chapter: Develop
// Short Description: Open a new graphics window that preserves the aspect ratio of the given image size. 
void dev_open_window_fit_size (HTuple hv_Row, HTuple hv_Column, HTuple hv_Width, 
    HTuple hv_Height, HTuple hv_WidthLimit, HTuple hv_HeightLimit, LONG PictureControlID,  HTuple *hv_WindowHandle);
// Chapter: Develop
// Short Description: Resizes a graphics window with a given maximum extent such that it preserves the aspect ratio of a given width and height 
void dev_resize_window_fit_size (HTuple hv_Row, HTuple hv_Column, HTuple hv_Width, 
    HTuple hv_Height, HTuple hv_WidthLimit, HTuple hv_HeightLimit);
// Chapter: Develop
// Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'off'. 
void dev_update_off ();
// Chapter: Time
// Short Description: Estimate the remaining time for a task given the current progress. 
void estimate_progress (HTuple hv_SecondsStart, HTuple hv_ProgressMin, HTuple hv_ProgressCurrent, 
    HTuple hv_ProgressMax, HTuple *hv_SecondsElapsed, HTuple *hv_SecondsRemaining, 
    HTuple *hv_ProgressPercent, HTuple *hv_ProgressPerSecond);
// Chapter: Deep Learning / Evaluation
// Short Description: Evaluate the model given by DLModelHandle on the selected samples of DLDataset. 
void evaluate_dl_model (HTuple hv_DLDataset, HTuple hv_DLModelHandle, HTuple hv_SampleSelectMethod, 
    HTuple hv_SampleSelectValues, HTuple hv_GenParam, HTuple *hv_EvaluationResult, 
    HTuple *hv_EvalParams);
// Chapter: Deep Learning / Model
// Short Description: Retrieve the indices of Samples that contain KeyName matching KeyValue according to the Mode set. 
void find_dl_samples (HTuple hv_Samples, HTuple hv_KeyName, HTuple hv_KeyValue, HTuple hv_Mode, 
    HTuple *hv_SampleIndices);
// Chapter: XLD / Creation
// Short Description: Creates an arrow shaped XLD contour. 
void gen_arrow_contour_xld (HObject *ho_Arrow, HTuple hv_Row1, HTuple hv_Column1, 
    HTuple hv_Row2, HTuple hv_Column2, HTuple hv_HeadLength, HTuple hv_HeadWidth);
// Chapter: Deep Learning / Classification
// Short Description: Compute a confusion matrix, which an be visualized and/or returned. 
void gen_confusion_matrix (HTuple hv_GroundTruthLabels, HTuple hv_PredictedClasses, 
    HTuple hv_GenParamName, HTuple hv_GenParamValue, HTuple hv_WindowHandle, HTuple *hv_ConfusionMatrix);
// Chapter: Deep Learning / Model
// Short Description: The procedure returns DLSample dicts for given sample indices of a DLDataset. 
void gen_dl_samples (HTuple hv_DLDataset, HTuple hv_SampleIndices, HTuple hv_RestrictKeysDLSample, 
    HTuple hv_GenParam, HTuple *hv_DLSampleBatch);
// Chapter: Deep Learning / Model
// Short Description: Store the given images in a tuple of dictionaries DLSamples. 
void gen_dl_samples_from_images (HObject ho_Images, HTuple *hv_DLSampleBatch);
// Chapter: Deep Learning / Semantic Segmentation
// Short Description: Generates weight images for the training dataset. 
void gen_dl_segmentation_weight_images (HTuple hv_DLDataset, HTuple hv_DLPreprocessParam, 
    HTuple hv_ClassWeights, HTuple hv_GenParam);
// Chapter: Deep Learning / Classification
// Short Description: Generate a tiled image for the classified DLSamples and add indications whether the predictions are true or not. 
void gen_tiled_classification_image_result (HObject *ho_TiledImageRow, HTuple hv_DLSamples, 
    HTuple hv_SpacingCol, HTuple hv_PredictionsCorrect, HTuple hv_ResClasses, HTuple *hv_TextImageRows, 
    HTuple *hv_TextImageColumns, HTuple *hv_TextImageWidth, HTuple *hv_TextImageHeight);
// Chapter: Deep Learning / Semantic Segmentation
// Short Description: Generate a tiled image for segmentation DLSamples. 
void gen_tiled_segmentation_image (HObject *ho_TiledImageRow, HTuple hv_DLSamples, 
    HTuple hv_SpacingCol, HTuple hv_Width, HTuple hv_Height);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Get the ground truth anomaly label and label ID. 
void get_anomaly_ground_truth_label (HTuple hv_SampleKeys, HTuple hv_DLSample, HTuple *hv_AnomalyLabelGroundTruth, 
    HTuple *hv_AnomalyLabelIDGroundTruth);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Get the anomaly results out of DLResult and apply thresholds (if specified). 
void get_anomaly_result (HObject *ho_AnomalyImage, HObject *ho_AnomalyRegion, HTuple hv_DLResult, 
    HTuple hv_ResultKeys, HTuple hv_AnomalyClassThreshold, HTuple hv_AnomalyRegionThreshold, 
    HTuple *hv_AnomalyScore, HTuple *hv_AnomalyClassID, HTuple *hv_AnomalyClassThresholdDisplay, 
    HTuple *hv_AnomalyRegionThresholdDisplay);
// Chapter: Graphics / Window
// Short Description: Get the next child window that can be used for visualization. 
void get_child_window (HTuple hv_HeightImage, HTuple hv_Font, HTuple hv_FontSize, 
    HTuple hv_Text, HTuple hv_PrevWindowCoordinates, HTuple hv_WindowHandleDict, 
    HTuple hv_WindowHandleKey, HTuple *hv_WindowImageRatio, HTuple *hv_PrevWindowCoordinatesOut);
// Chapter: Deep Learning / Classification
// Short Description: Get the ground truth classification label id. 
void get_classification_ground_truth (HTuple hv_SampleKeys, HTuple hv_DLSample, HTuple *hv_ClassificationLabelIDGroundTruth);
// Chapter: Deep Learning / Classification
// Short Description: Get the predicted classification class ID. 
void get_classification_result (HTuple hv_ResultKeys, HTuple hv_DLResult, HTuple *hv_ClassificationClassID);
// Chapter: Deep Learning / Semantic Segmentation
// Short Description: Get the confidences of the segmentation result. 
void get_confidence_image (HObject *ho_ImageConfidence, HTuple hv_ResultKeys, HTuple hv_DLResult);
// Chapter: Deep Learning / Model
// Short Description: Generate NumColors distinct colors 
void get_distinct_colors (HTuple hv_NumColors, HTuple hv_Random, HTuple hv_StartColor, 
    HTuple hv_EndColor, HTuple *hv_Colors);
// Chapter: Deep Learning / Model
// Short Description: Generate NumColors distinct colors 
void get_distinct_colors_dev_display_pie_chart (HTuple hv_NumColors, HTuple hv_Random, 
    HTuple hv_StartColor, HTuple hv_EndColor, HTuple *hv_Colors);
// Chapter: Deep Learning / Model
// Short Description: Generates certain colors for different ClassNames 
void get_dl_class_colors (HTuple hv_ClassNames, HTuple *hv_Colors);
// Chapter: Deep Learning / Model
// Short Description: Get a parameter value from GenParamValue with the name RequestedGenParamName. 
void get_genparam_single_value (HTuple hv_GenParamName, HTuple hv_GenParamValue, 
    HTuple hv_RequestedGenParamName, HTuple *hv_FoundGenParamValue);
// Chapter: Deep Learning / Model
// Short Description: Get the image of a sample. 
void get_image (HObject *ho_Image, HTuple hv_SampleKeys, HTuple hv_DLSample);
// Chapter: Graphics / Window
// Short Description: Get the next window that can be used for visualization. 
void get_next_window (HTuple hv_Font, HTuple hv_FontSize, HTuple hv_ShowBottomDesc, 
    HTuple hv_WidthImage, HTuple hv_HeightImage, HTuple hv_MapColorBarWidth, HTuple hv_ScaleWindows, 
    HTuple hv_ThresholdWidth, HTuple hv_PrevWindowCoordinates, HTuple hv_WindowHandleDict, 
    HTuple hv_WindowHandleKey, HTuple *hv_CurrentWindowHandle, HTuple *hv_WindowImageRatioHeight, 
    HTuple *hv_PrevWindowCoordinatesOut);
// Chapter: Deep Learning / Semantic Segmentation
// Short Description: Get the ground truth segmentation image. 
void get_segmentation_image_ground_truth (HObject *ho_SegmentationImagGroundTruth, 
    HTuple hv_SampleKeys, HTuple hv_DLSample);
// Chapter: Deep Learning / Semantic Segmentation
// Short Description: Get the predicted segmentation result image. 
void get_segmentation_image_result (HObject *ho_SegmentationImageResult, HTuple hv_ResultKeys, 
    HTuple hv_DLResult);
// Chapter: Deep Learning / Semantic Segmentation
// Short Description: Get the weight image of a sample. 
void get_weight_image (HObject *ho_ImageWeight, HTuple hv_SampleKeys, HTuple hv_DLSample);
// Chapter: File / Misc
void images_exist (HTuple hv_ImageList);
// Chapter: Deep Learning / Evaluation
// Short Description: Initialize the dictionary RunningMeasures for the evaluation. 
void init_running_evaluation_measures (HTuple hv_EvalParams, HTuple *hv_RunningMeasures);
// Chapter: Deep Learning / Model
// Short Description: Initialize change strategies data. 
void init_train_dl_model_change_strategies (HTuple hv_TrainParam, HTuple *hv_ChangeStrategyData);
// Chapter: Deep Learning / Model
// Short Description: Initializes the dictionary setting the serialization strategies. 
void init_train_dl_model_serialization_strategies (HTuple hv_TrainParam, HTuple *hv_SerializationData);
// Chapter: Deep Learning / Semantic Segmentation
// Short Description: Generate image list and corresponding annotation file list. 
void list_image_and_annotation_files (HTuple hv_Type, HTuple hv_ImageDir, HTuple hv_AnnotationDir, 
    HTuple hv_ImageListIn, HTuple hv_GenParam, HTuple *hv_ImageListOut, HTuple *hv_LabelListOut, 
    HTuple *hv_AnnotationListOut);
// Chapter: File / Misc
// Short Description: Get all image files under the given path 
void list_image_files (HTuple hv_ImageDirectory, HTuple hv_Extensions, HTuple hv_Options, 
    HTuple *hv_ImageFiles);
// Chapter: Deep Learning / Model
// Short Description: shuffles the input colors in a deterministic way 
void make_neighboring_colors_distinguishable (HTuple hv_ColorsRainbow, HTuple *hv_Colors);
// Chapter: Graphics / Window
// Short Description: Open a window next to the given WindowHandleFather.  
void open_child_window (HTuple hv_WindowHandleFather, HTuple hv_Font, HTuple hv_FontSize, 
    HTuple hv_Text, HTuple hv_PrevWindowCoordinates, HTuple hv_WindowHandleDict, 
    HTuple hv_WindowHandleKey, HTuple *hv_WindowHandleChild, HTuple *hv_PrevWindowCoordinatesOut);
// Chapter: Graphics / Window
// Short Description: Open a new window, either next to the last ones, or in a new row. 
void open_next_window (HTuple hv_Font, HTuple hv_FontSize, HTuple hv_ShowBottomDesc, 
    HTuple hv_WidthImage, HTuple hv_HeightImage, HTuple hv_MapColorBarWidth, HTuple hv_ScaleWindows, 
    HTuple hv_ThresholdWidth, HTuple hv_PrevWindowCoordinates, HTuple hv_WindowHandleDict, 
    HTuple hv_WindowHandleKey, HTuple *hv_WindowHandleNew, HTuple *hv_WindowImageRatioHeight, 
    HTuple *hv_PrevWindowCoordinatesOut);
// Chapter: File / Misc
// Short Description: Parse a filename into directory, base filename, and extension 
void parse_filename (HTuple hv_FileName, HTuple *hv_BaseName, HTuple *hv_Extension, 
    HTuple *hv_Directory);
// Chapter: Graphics / Output
// Short Description: This procedure plots tuples representing functions or curves in a coordinate system. 
void plot_tuple (HTuple hv_WindowHandle, HTuple hv_XValues, HTuple hv_YValues, HTuple hv_XLabel, 
    HTuple hv_YLabel, HTuple hv_Color, HTuple hv_GenParamName, HTuple hv_GenParamValue);
// Chapter: Graphics / Output
// Short Description: This procedure plots tuples representing functions or curves in a coordinate system. 
void plot_tuple_no_window_handling (HTuple hv_WindowHandle, HTuple hv_XValues, HTuple hv_YValues, 
    HTuple hv_XLabel, HTuple hv_YLabel, HTuple hv_Color, HTuple hv_GenParamName, 
    HTuple hv_GenParamValue);
// Chapter: File / Misc
void prepare_image_lists (HTuple hv_ImageDirs, HTuple hv_Extensions, HTuple *hv_ImageBaseNames, 
    HTuple *hv_ImageExtensions, HTuple *hv_ImageDirectories);
// Chapter: Deep Learning / Model
// Short Description: Standard preprocessing on the entire dataset declared in DLDataset. 
void preprocess_dl_dataset (HTuple hv_DLDataset, HTuple hv_DataDirectory, HTuple hv_DLPreprocessParam, 
    HTuple hv_GenParam, HTuple *hv_DLDatasetFileName);
// Chapter: Deep Learning / Model
// Short Description: Preprocess anomaly images for evaluation and visualization of the deep-learning-based anomaly detection. 
void preprocess_dl_model_anomaly (HObject ho_AnomalyImages, HObject *ho_AnomalyImagesPreprocessed, 
    HTuple hv_DLPreprocessParam);
// Chapter: Deep Learning / Object Detection
// Short Description: This procedure preprocesses the bounding boxes of type 'rectangle1' for a given sample. 
void preprocess_dl_model_bbox_rect1 (HObject ho_ImageRaw, HTuple hv_DLSample, HTuple hv_DLPreprocessParam);
// Chapter: Deep Learning / Object Detection
// Short Description: This procedure preprocesses the bounding boxes of type 'rectangle2' for a given sample. 
void preprocess_dl_model_bbox_rect2 (HObject ho_ImageRaw, HTuple hv_DLSample, HTuple hv_DLPreprocessParam);
// Chapter: Deep Learning / Model
// Short Description: Preprocess images for deep-learning-based training and inference. 
void preprocess_dl_model_images (HObject ho_Images, HObject *ho_ImagesPreprocessed, 
    HTuple hv_DLPreprocessParam);
// Chapter: Deep Learning / Semantic Segmentation
// Short Description: Preprocess segmentation and weight images for deep-learning-based segmentation training and inference. 
void preprocess_dl_model_segmentations (HObject ho_ImagesRaw, HObject ho_Segmentations, 
    HObject *ho_SegmentationsPreprocessed, HTuple hv_DLPreprocessParam);
// Chapter: Deep Learning / Model
// Short Description: Preprocess given DLSamples according to the preprocessing parameters given in DLPreprocessParam. 
void preprocess_dl_samples (HTuple hv_DLSampleBatch, HTuple hv_DLPreprocessParam);
// Chapter: Tuple / Conversion
// Short Description: Prints a tuple of values to a string. 
void pretty_print_tuple (HTuple hv_Tuple, HTuple *hv_TupleStr);
// Chapter: System / Multithreading
void read_dict_object (HObject *ho_ObjectData, HTuple hv_DictHandle, HTuple hv_Key);
// Chapter: System / Multithreading
void read_dict_tuple (HTuple hv_DictHandle, HTuple hv_Key, HTuple *hv_TupleData);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Generate a DLDataset dictionary for anomaly detection. 
void read_dl_dataset_anomaly (HTuple hv_ImageDir, HTuple hv_AnomalyDir, HTuple hv_ImageList, 
    HTuple hv_AnomalyList, HTuple hv_GenParam, HTuple *hv_DLDataset);
// Chapter: Deep Learning / Model
// Short Description: Read the dictionaries DLSamples from files. 
void read_dl_samples (HTuple hv_DLDataset, HTuple hv_SampleIndices, HTuple *hv_DLSampleBatch);
// Chapter: Image / Manipulation
// Short Description: Changes a value of ValuesToChange in Image to NewValue. 
void reassign_pixel_values (HObject ho_Image, HObject *ho_ImageOut, HTuple hv_ValuesToChange, 
    HTuple hv_NewValue);
// Chapter: Deep Learning / Evaluation
// Short Description: Reduce the evaluation result to a single value. 
void reduce_dl_evaluation_result (HTuple hv_EvaluationResult, HTuple hv_EvaluationComparisonKeys, 
    HTuple *hv_Value, HTuple *hv_ValidEvaluationKeys);
// Chapter: File / Misc
// Short Description: This procedure removes a directory recursively. 
void remove_dir_recursively (HTuple hv_DirName);
// Chapter: Deep Learning / Model
// Short Description: This procedure replaces legacy preprocessing parameters. 
void replace_legacy_preprocessing_parameters (HTuple hv_DLPreprocessParam);
// Chapter: Deep Learning / Model
// Short Description: Restore serialized DL train infos to resume the training. 
void restore_dl_train_info_for_resuming (HTuple hv_StartEpoch, HTuple hv_SerializationData, 
    HTuple hv_TrainParam, HTuple hv_DisplayData, HTuple *hv_EvaluationInfos, HTuple *hv_TrainInfos, 
    HTuple *hv_DisplayEvaluationEpochs, HTuple *hv_DisplayValidationEvaluationValues, 
    HTuple *hv_DisplayTrainEvaluationValues, HTuple *hv_DisplayLossEpochs, HTuple *hv_DisplayLoss, 
    HTuple *hv_DisplayLearningRates, HTuple *hv_TrainResultsRestored, HTuple *hv_StartEpochNumber);
// Chapter: Filters / Arithmetic
// Short Description: Scale the gray values of an image from the interval [Min,Max] to [0,255] 
void scale_image_range (HObject ho_Image, HObject *ho_ImageScaled, HTuple hv_Min, 
    HTuple hv_Max);
// Chapter: Deep Learning / Model
// Short Description: Serialize a DLModelHandle with current meta information. 
void serialize_train_dl_model_intermediate (HTuple hv_DLModelHandle, HTuple hv_Epoch, 
    HTuple hv_Strategy, HTuple hv_TrainInfos, HTuple hv_EvaluationInfos, HTuple *hv_FilenameModel, 
    HTuple *hv_FilenameMetaData);
// Chapter: Graphics / Text
// Short Description: Set font independent of OS 
void set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, HTuple hv_Bold, 
    HTuple hv_Slant);
// Chapter: Deep Learning / Model
// Short Description: Split the samples into training, validation, and test subsets. 
void split_dl_dataset (HTuple hv_DLDataset, HTuple hv_TrainingPercent, HTuple hv_ValidationPercent, 
    HTuple hv_GenParam);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Apply the given thresholds on anomaly detection results for image classification and region segmentation. 
void threshold_dl_anomaly_results (HTuple hv_AnomalySegmentationThreshold, HTuple hv_AnomalyClassificationThreshold, 
    HTuple hv_DLResults);
// Chapter: Time
// Short Description: Create a formatted string of a time span. 
void timespan_string (HTuple hv_TotalSeconds, HTuple hv_Format, HTuple *hv_TimeString);
// Chapter: Deep Learning / Model
// Short Description: Train a deep-learning-based model on a dataset. 
void train_dl_model (HTuple hv_DLDataset, HTuple hv_DLModelHandle, HTuple hv_TrainParam, 
    HTuple hv_StartEpoch, HTuple *hv_TrainResults, HTuple *hv_TrainInfos, HTuple *hv_EvaluationInfos);
// Chapter: Tuple / Element Order
// Short Description: Sort the elements of a tuple randomly. 
void tuple_shuffle (HTuple hv_Tuple, HTuple *hv_Shuffled);
// Chapter: Deep Learning / Evaluation
// Short Description: Update RunningMeasures by evaluating Samples and corresponding Results. 
void update_running_evaluation_measures (HTuple hv_Samples, HTuple hv_Results, HTuple hv_EvalParams, 
    HTuple hv_RunningMeasures);
// Chapter: Deep Learning / Anomaly Detection
// Short Description: Update running measures for an image anomaly detection evaluation. 
void update_running_image_anomaly_measures (HTuple hv_Samples, HTuple hv_Results, 
    HTuple hv_EvalParams, HTuple hv_RunningMeasures);
// Chapter: Deep Learning / Evaluation
// Short Description: Update running measures for an image classification evaluation. 
void update_running_image_classification_measures (HTuple hv_Samples, HTuple hv_Results, 
    HTuple hv_EvalParams, HTuple hv_RunningMeasures);
// Chapter: Deep Learning / Evaluation
// Short Description: Update running measures for an instance-based evaluation. 
void update_running_instance_measures (HTuple hv_Samples, HTuple hv_Results, HTuple hv_EvalParams, 
    HTuple hv_RunningMeasures);
// Chapter: Deep Learning / Evaluation
// Short Description: Update running measures for a pixel-based evaluation. 
void update_running_pixel_measures (HTuple hv_Samples, HTuple hv_Results, HTuple hv_EvalParams, 
    HTuple hv_RunningMeasures);
// Chapter: Deep Learning / Model
// Short Description: Update model parameters according to the change strategies. 
void update_train_dl_model_change_strategies (HTuple hv_DLModelHandle, HTuple hv_ChangeStrategyData, 
    HTuple hv_Epoch);
// Chapter: Deep Learning / Model
// Short Description: Serialize the model if a strategy applies to the current training status. 
void update_train_dl_model_serialization (HTuple hv_TrainParam, HTuple hv_SerializationData, 
    HTuple hv_Iteration, HTuple hv_NumIterations, HTuple hv_Epoch, HTuple hv_EvaluationResult, 
    HTuple hv_DLModelHandle, HTuple hv_TrainInfos, HTuple hv_EvaluationInfos);
// Chapter: Graphics / Window
// Short Description: This procedure sets and returns meta information to display images correctly. 
void update_window_meta_information (HTuple hv_WindowHandle, HTuple hv_WidthImage, 
    HTuple hv_HeightImage, HTuple hv_WindowRow1, HTuple hv_WindowColumn1, HTuple hv_MapColorBarWidth, 
    HTuple hv_MarginBottom, HTuple *hv_WindowImageRatioHeight, HTuple *hv_WindowImageRatioWidth, 
    HTuple *hv_SetPartRow2, HTuple *hv_SetPartColumn2, HTuple *hv_PrevWindowCoordinatesOut);
// Chapter: Deep Learning / Evaluation
// Short Description: Check that all given entries in EvalParams are valid. 
void validate_evaluation_param (HTuple hv_EvalParams, HTuple *hv_Valid, HTuple *hv_Exception);
// Chapter: Deep Learning / Model
// Short Description: Write the dictionaries of the samples in DLSampleBatch to hdict files and store the paths in DLDataset. 
void write_dl_samples (HTuple hv_DLDataset, HTuple hv_SampleIndices, HTuple hv_DLSampleBatch, 
    HTuple hv_GenParamName, HTuple hv_GenParamValue);
// Local procedures 
void get_image_dir (HTuple *hv_ImageDir);
void preprocess_dl_samples_bottle (HTuple hv_DLSamples);

// Generated stubs for parallel procedure calls. Wrapped in name
// space to avoid name conflicts with actual procedure names
namespace HDevExportCpp
{
// Parallel execution wrapper for create_dl_dataset_anomaly_samples(...) 
static void* _hcppthread_create_dl_dataset_anomaly_samples(void *hcthread);
}


